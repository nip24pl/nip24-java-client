/*
 * NIP24 Service
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.8
 * Contact: kontakt@nip24.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package pl.nip24.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import pl.nip24.client.model.TKodFormularza;
/**
 * Nagłówek
 */
@Schema(description = "Nagłówek")

public class TNaglowek {
  @JsonProperty("KodFormularza")
  private TKodFormularza kodFormularza = null;

  @JsonProperty("WariantFormularza")
  private Integer wariantFormularza = null;

  @JsonProperty("DataWytworzeniaFa")
  private LocalDateTime dataWytworzeniaFa = null;

  @JsonProperty("SystemInfo")
  private String systemInfo = null;

  public TNaglowek kodFormularza(TKodFormularza kodFormularza) {
    this.kodFormularza = kodFormularza;
    return this;
  }

   /**
   * Get kodFormularza
   * @return kodFormularza
  **/
  @Schema(required = true, description = "")
  public TKodFormularza getKodFormularza() {
    return kodFormularza;
  }

  public void setKodFormularza(TKodFormularza kodFormularza) {
    this.kodFormularza = kodFormularza;
  }

  public TNaglowek wariantFormularza(Integer wariantFormularza) {
    this.wariantFormularza = wariantFormularza;
    return this;
  }

   /**
   * Get wariantFormularza
   * @return wariantFormularza
  **/
  @Schema(required = true, description = "")
  public Integer getWariantFormularza() {
    return wariantFormularza;
  }

  public void setWariantFormularza(Integer wariantFormularza) {
    this.wariantFormularza = wariantFormularza;
  }

  public TNaglowek dataWytworzeniaFa(LocalDateTime dataWytworzeniaFa) {
    this.dataWytworzeniaFa = dataWytworzeniaFa;
    return this;
  }

   /**
   * Get dataWytworzeniaFa
   * @return dataWytworzeniaFa
  **/
  @Schema(required = true, description = "")
  public LocalDateTime getDataWytworzeniaFa() {
    return dataWytworzeniaFa;
  }

  public void setDataWytworzeniaFa(LocalDateTime dataWytworzeniaFa) {
    this.dataWytworzeniaFa = dataWytworzeniaFa;
  }

  public TNaglowek systemInfo(String systemInfo) {
    this.systemInfo = systemInfo;
    return this;
  }

   /**
   * Get systemInfo
   * @return systemInfo
  **/
  @Schema(description = "")
  public String getSystemInfo() {
    return systemInfo;
  }

  public void setSystemInfo(String systemInfo) {
    this.systemInfo = systemInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TNaglowek tnaglowek = (TNaglowek) o;
    return Objects.equals(this.kodFormularza, tnaglowek.kodFormularza) &&
        Objects.equals(this.wariantFormularza, tnaglowek.wariantFormularza) &&
        Objects.equals(this.dataWytworzeniaFa, tnaglowek.dataWytworzeniaFa) &&
        Objects.equals(this.systemInfo, tnaglowek.systemInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kodFormularza, wariantFormularza, dataWytworzeniaFa, systemInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TNaglowek {\n");
    
    sb.append("    kodFormularza: ").append(toIndentedString(kodFormularza)).append("\n");
    sb.append("    wariantFormularza: ").append(toIndentedString(wariantFormularza)).append("\n");
    sb.append("    dataWytworzeniaFa: ").append(toIndentedString(dataWytworzeniaFa)).append("\n");
    sb.append("    systemInfo: ").append(toIndentedString(systemInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
