/*
 * NIP24 Service
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.8
 * Contact: kontakt@nip24.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package pl.nip24.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import pl.nip24.client.model.TAdres;
import pl.nip24.client.model.TPodmiot2;
/**
 * W przypadku korekty danych nabywcy występującego jako Podmiot2 lub dodatkowego nabywcy występującego jako Podmiot3 należy podać pełne dane tego podmiotu występujące na fakturze korygowanej. Korekcie nie podlegają błędne numery identyfikujące nabywcę oraz dodatkowego nabywcę. W przypadku korygowania pozostałych danych nabywcy lub dodatkowego nabywcy wskazany numer identyfikacyjny ma być tożsamy z numerem w części Podmiot2 względnie Podmiot3 faktury korygującej
 */
@Schema(description = "W przypadku korekty danych nabywcy występującego jako Podmiot2 lub dodatkowego nabywcy występującego jako Podmiot3 należy podać pełne dane tego podmiotu występujące na fakturze korygowanej. Korekcie nie podlegają błędne numery identyfikujące nabywcę oraz dodatkowego nabywcę. W przypadku korygowania pozostałych danych nabywcy lub dodatkowego nabywcy wskazany numer identyfikacyjny ma być tożsamy z numerem w części Podmiot2 względnie Podmiot3 faktury korygującej")

public class Podmiot2K {
  @JsonProperty("DaneIdentyfikacyjne")
  private TPodmiot2 daneIdentyfikacyjne = null;

  @JsonProperty("Adres")
  private TAdres adres = null;

  @JsonProperty("IDNabywcy")
  private String idNabywcy = null;

  public Podmiot2K daneIdentyfikacyjne(TPodmiot2 daneIdentyfikacyjne) {
    this.daneIdentyfikacyjne = daneIdentyfikacyjne;
    return this;
  }

   /**
   * Get daneIdentyfikacyjne
   * @return daneIdentyfikacyjne
  **/
  @Schema(required = true, description = "")
  public TPodmiot2 getDaneIdentyfikacyjne() {
    return daneIdentyfikacyjne;
  }

  public void setDaneIdentyfikacyjne(TPodmiot2 daneIdentyfikacyjne) {
    this.daneIdentyfikacyjne = daneIdentyfikacyjne;
  }

  public Podmiot2K adres(TAdres adres) {
    this.adres = adres;
    return this;
  }

   /**
   * Get adres
   * @return adres
  **/
  @Schema(description = "")
  public TAdres getAdres() {
    return adres;
  }

  public void setAdres(TAdres adres) {
    this.adres = adres;
  }

  public Podmiot2K idNabywcy(String idNabywcy) {
    this.idNabywcy = idNabywcy;
    return this;
  }

   /**
   * Get idNabywcy
   * @return idNabywcy
  **/
  @Schema(description = "")
  public String getIdNabywcy() {
    return idNabywcy;
  }

  public void setIdNabywcy(String idNabywcy) {
    this.idNabywcy = idNabywcy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Podmiot2K podmiot2K = (Podmiot2K) o;
    return Objects.equals(this.daneIdentyfikacyjne, podmiot2K.daneIdentyfikacyjne) &&
        Objects.equals(this.adres, podmiot2K.adres) &&
        Objects.equals(this.idNabywcy, podmiot2K.idNabywcy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daneIdentyfikacyjne, adres, idNabywcy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Podmiot2K {\n");
    
    sb.append("    daneIdentyfikacyjne: ").append(toIndentedString(daneIdentyfikacyjne)).append("\n");
    sb.append("    adres: ").append(toIndentedString(adres)).append("\n");
    sb.append("    idNabywcy: ").append(toIndentedString(idNabywcy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
