/*
 * NIP24 Service
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.8
 * Contact: kontakt@nip24.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package pl.nip24.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import pl.nip24.client.model.ZamowienieWiersz;
/**
 * Zamówienie lub umowa, o których mowa w art. 106f ust. 1 pkt 4 ustawy (dla faktur zaliczkowych) w walucie, w której wystawiono fakturę zaliczkową. W przypadku faktury korygującej fakturę zaliczkową należy wykazać różnice wynikające z korekty poszczególnych pozycji zamówienia lub umowy lub dane pozycji korygowanych w stanie przed korektą i po korekcie jako osobne wiersze, jeśli korekta dotyczy wartości zamówienia lub umowy. W przypadku faktur korygujących faktury zaliczkowe, jeśli korekta nie dotyczy wartości zamówienia lub umowy i jednocześnie zmienia wysokość podstawy opodatkowania lub podatku, należy wprowadzić zapis wg stanu przed korektą i zapis w stanie po korekcie w celu potwierdzenia braku zmiany wartości danej pozycji
 */
@Schema(description = "Zamówienie lub umowa, o których mowa w art. 106f ust. 1 pkt 4 ustawy (dla faktur zaliczkowych) w walucie, w której wystawiono fakturę zaliczkową. W przypadku faktury korygującej fakturę zaliczkową należy wykazać różnice wynikające z korekty poszczególnych pozycji zamówienia lub umowy lub dane pozycji korygowanych w stanie przed korektą i po korekcie jako osobne wiersze, jeśli korekta dotyczy wartości zamówienia lub umowy. W przypadku faktur korygujących faktury zaliczkowe, jeśli korekta nie dotyczy wartości zamówienia lub umowy i jednocześnie zmienia wysokość podstawy opodatkowania lub podatku, należy wprowadzić zapis wg stanu przed korektą i zapis w stanie po korekcie w celu potwierdzenia braku zmiany wartości danej pozycji")

public class Zamowienie {
  @JsonProperty("WartoscZamowienia")
  private Double wartoscZamowienia = null;

  @JsonProperty("ZamowienieWiersz")
  private List<ZamowienieWiersz> zamowienieWiersz = new ArrayList<>();

  public Zamowienie wartoscZamowienia(Double wartoscZamowienia) {
    this.wartoscZamowienia = wartoscZamowienia;
    return this;
  }

   /**
   * Get wartoscZamowienia
   * @return wartoscZamowienia
  **/
  @Schema(required = true, description = "")
  public Double getWartoscZamowienia() {
    return wartoscZamowienia;
  }

  public void setWartoscZamowienia(Double wartoscZamowienia) {
    this.wartoscZamowienia = wartoscZamowienia;
  }

  public Zamowienie zamowienieWiersz(List<ZamowienieWiersz> zamowienieWiersz) {
    this.zamowienieWiersz = zamowienieWiersz;
    return this;
  }

  public Zamowienie addZamowienieWierszItem(ZamowienieWiersz zamowienieWierszItem) {
    this.zamowienieWiersz.add(zamowienieWierszItem);
    return this;
  }

   /**
   * Get zamowienieWiersz
   * @return zamowienieWiersz
  **/
  @Schema(required = true, description = "")
  public List<ZamowienieWiersz> getZamowienieWiersz() {
    return zamowienieWiersz;
  }

  public void setZamowienieWiersz(List<ZamowienieWiersz> zamowienieWiersz) {
    this.zamowienieWiersz = zamowienieWiersz;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Zamowienie zamowienie = (Zamowienie) o;
    return Objects.equals(this.wartoscZamowienia, zamowienie.wartoscZamowienia) &&
        Objects.equals(this.zamowienieWiersz, zamowienie.zamowienieWiersz);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wartoscZamowienia, zamowienieWiersz);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Zamowienie {\n");
    
    sb.append("    wartoscZamowienia: ").append(toIndentedString(wartoscZamowienia)).append("\n");
    sb.append("    zamowienieWiersz: ").append(toIndentedString(zamowienieWiersz)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
